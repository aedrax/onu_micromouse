<VisualMicro>
  <Program Name="Micromouse" Ext=".ino" Location="C:\Users\p-sorensen\Documents\GitHub\Micromouse">
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="mega_atmega2560" Description="Arduino Mega w/ ATmega2560 (Mega 2560)" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\p-sorensen\Documents\Arduino" name="Arduino Mega w/ ATmega2560 (Mega 2560)" vid.0="0x2341" pid.0="0x0010" vid.1="0x2341" pid.1="0x0042" vid.2="0x2A03" pid.2="0x0010" vid.3="0x2A03" pid.3="0x0042" vid.0x2A03.warning="Uncertified" upload.tool="avrdude" upload.maximum_data_size="8192" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.f_cpu="16000000L" build.core="arduino" build.variant="mega" build.board="AVR_MEGA2560" menu.cpu.atmega2560="ATmega2560 (Mega 2560)" menu.cpu.atmega2560.upload.protocol="wiring" menu.cpu.atmega2560.upload.maximum_size="253952" menu.cpu.atmega2560.upload.speed="115200" menu.cpu.atmega2560.bootloader.high_fuses="0xD8" menu.cpu.atmega2560.bootloader.extended_fuses="0xFD" menu.cpu.atmega2560.bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" menu.cpu.atmega2560.build.mcu="atmega2560" menu.cpu.atmega2560.build.board="AVR_MEGA2560" menu.cpu.atmega1280="ATmega1280" menu.cpu.atmega1280.upload.protocol="arduino" menu.cpu.atmega1280.upload.maximum_size="126976" menu.cpu.atmega1280.upload.speed="57600" menu.cpu.atmega1280.bootloader.high_fuses="0xDA" menu.cpu.atmega1280.bootloader.extended_fuses="0xF5" menu.cpu.atmega1280.bootloader.file="atmega/ATmegaBOOT_168_atmega1280.hex" menu.cpu.atmega1280.build.mcu="atmega1280" menu.cpu.atmega1280.build.board="AVR_MEGA" runtime.ide.path="C:\Program Files (x86)\Arduino" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="161" originalid="mega" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" version="1.6.1" compiler.path="{runtime.ide.path}/hardware/tools/avr/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os -w -ffunction-sections -fdata-sections -MMD" compiler.c.elf.flags="-w -Os -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os -w -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD" compiler.ar.cmd="avr-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{build.path}/{archive_file}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" tools.avrdude.cmd.path="{runtime.ide.path}/hardware/tools/avr/bin/avrdude" tools.avrdude.config.path="{runtime.ide.path}/hardware/tools/avr/etc/avrdude.conf" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\arduino16x" upload.protocol="wiring" upload.maximum_size="253952" upload.speed="115200" bootloader.high_fuses="0xD8" bootloader.extended_fuses="0xFD" bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" build.mcu="atmega2560" ide.hint="Arduino 1.6 Ide" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.location.preferences="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino\preferences.txt" ide.default.version="160" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="{runtime.ide.path}\arduino.cc\en\Reference" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.appid="arduino16x" location.sketchbook="C:\Users\p-sorensen\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.core.include="arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" build.variant.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" vm.runtime.compiler.showwarnings="false" serial.port.file="COM7" serial.port="COM7" serial.port.num="7" extra.time.local="70068174" includes=" -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega&quot;  -I&quot;C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\default\debuggers\VM_DBG&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries\Wire&quot;  -I&quot;C:\Program Files (x86)\Arduino\libraries&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries&quot;  -I&quot;C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\default\debuggers&quot;  -I&quot;C:\Users\p-sorensen\Documents\Arduino\libraries&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries\Wire\utility&quot;" build.path="C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560" build.project_name="Micromouse" build.variant.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" build.core.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" archive_file="core.a" object_file="C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\Wire\utility\twi.c.o" source_file="C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries\Wire\utility\twi.c" object_files="&quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\Adafruit_MotorShield.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\Adafruit_PWMServoDriver.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\AnalogDistanceSensor.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\CombinedDistanceSensors.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\DistanceGP2Y0A41SK.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\DistanceSensor.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\DistanceSRF04.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\Encoder.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\Micromouse.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\OrangutanDigital.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\PololuWheelEncoders.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\UltrasonicDistanceSensor.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\VM_DBG\VM_mem_check.c.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\VM_DBG\VM_DBG.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\Wire\Wire.cpp.o&quot; &quot;C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560\Wire\utility\twi.c.o&quot; " upload.verbose="-q -q" path="C:\Program Files (x86)\Arduino\hardware\tools" cmd.path="{runtime.ide.path}/hardware/tools/avr/bin/avrdude" config.path="{runtime.ide.path}/hardware/tools/avr/etc/avrdude.conf" />
    </Platform>
    <Compile CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\p-sorensen\AppData\Local\V.Micro\Arduino\Builds\Micromouse\mega_atmega2560" ReportDetailedMemoryUsage="0" IsDebugStart="1" SketchName="Micromouse" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Debug EnableBreak="1" DebugEnabled="1" RemotePortSpeedWrittenToDebugSource="9600" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="Micromouse.ino, line 183" Id="97adeab5-c001-4d1b-9899-3c2d2f9e8f6d" Enabled="1" Message="millis is currently {millis()}" MessageTextType="0" PreProcessedMessage="millis is currently {0}" Condition="millis()&gt;0 || millis()&gt;1" ConditionType="1" CurrentHits="0" File="c:\users\p-sorensen\documents\github\micromouse\micromouse.ino" FileLine="183" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="250" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='97adeab5-c001-4d1b-9899-3c2d2f9e8f6d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>176		bool better = currentCell-&gt;distance &gt; getCellDistance(currentDirection);
177		bool isExplored = !getIsCellExplored(currentDirection);
178		
179	}
180	
181	
182	
--&gt;183	void loop()
184	{
185		while (currentCell-&gt;distance == 0);
186		updateWalls();
187		byte moveDirection = getBestDirection();
188		move(moveDirection);
189		
190	}
191	
192	void stop()
</Source>
        <MessageVariables>
          <MessageVariable Name="millis()" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="Micromouse.ino, line 188" Id="d6f44210-0350-4fbb-9af1-d9f5f11f3ace" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\p-sorensen\documents\github\micromouse\micromouse.ino" FileLine="188" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d6f44210-0350-4fbb-9af1-d9f5f11f3ace'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>181	
182	
183	void loop()
184	{
185		while (currentCell-&gt;distance == 0);
186		updateWalls();
187		byte moveDirection = getBestDirection();
--&gt;188		move(moveDirection);
189		
190	}
191	
192	void stop()
193	{
194		leftMotor-&gt;run(RELEASE);
195		rightMotor-&gt;run(RELEASE);
196	}
197	
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="Micromouse.ino, line 186" Id="0c983b7f-5706-48f4-a6c6-6097161122de" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\p-sorensen\documents\github\micromouse\micromouse.ino" FileLine="186" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='0c983b7f-5706-48f4-a6c6-6097161122de'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>179	}
180	
181	
182	
183	void loop()
184	{
185		while (currentCell-&gt;distance == 0);
--&gt;186		updateWalls();
187		byte moveDirection = getBestDirection();
188		move(moveDirection);
189		
190	}
191	
192	void stop()
193	{
194		leftMotor-&gt;run(RELEASE);
195		rightMotor-&gt;run(RELEASE);
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="Micromouse.ino, line 187" Id="3f9b9e89-3e5e-4c5b-b091-72d1dfc1c168" Enabled="1" Message="moveDirection is {moveDirection}" MessageTextType="0" PreProcessedMessage="moveDirection is {0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\p-sorensen\documents\github\micromouse\micromouse.ino" FileLine="187" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3f9b9e89-3e5e-4c5b-b091-72d1dfc1c168'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>180	
181	
182	
183	void loop()
184	{
185		while (currentCell-&gt;distance == 0);
186		updateWalls();
--&gt;187		byte moveDirection = getBestDirection();
188		move(moveDirection);
189		
190	}
191	
192	void stop()
193	{
194		leftMotor-&gt;run(RELEASE);
195		rightMotor-&gt;run(RELEASE);
196	}
</Source>
        <MessageVariables>
          <MessageVariable Name="moveDirection" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="Micromouse.ino, line 475" Id="47d537f6-f7fd-48a4-8f63-b0508593f71b" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\p-sorensen\documents\github\micromouse\micromouse.ino" FileLine="475" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='47d537f6-f7fd-48a4-8f63-b0508593f71b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>468		}
469	}
470	
471	byte getBestDirection()
472	{
473		//if the cell ahead of the robot is open and the distance is shorter than
474		//the current distance, and hasn't been explored go there
--&gt;475		if (!(currentCell-&gt;data &amp; currentDirection) &amp;&amp; currentCell-&gt;distance &gt; getCellDistance(currentDirection) &amp;&amp; !getIsCellExplored(currentDirection))
476		{
477			return currentDirection;
478		}
479	
480		//if the cell to the right is open and the distance is shorter than the current distance, and hasn't been explored go there
481		if (!(currentCell-&gt;data &amp; getDirection(RIGHT)) &amp;&amp; currentCell-&gt;distance &gt; getCellDistance(getDirection(RIGHT)) &amp;&amp; !getIsCellExplored(currentDirection))
482		{
483			return getDirection(RIGHT);
484		}
</Source>
      </BreakPoint>
      <BreakPoint Index="6" Name="Micromouse.ino, line 477" Id="7839e886-2e68-4e65-b5d7-07be2e383435" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\p-sorensen\documents\github\micromouse\micromouse.ino" FileLine="477" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='7839e886-2e68-4e65-b5d7-07be2e383435'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>470	
471	byte getBestDirection()
472	{
473		//if the cell ahead of the robot is open and the distance is shorter than
474		//the current distance, and hasn't been explored go there
475		if (!(currentCell-&gt;data &amp; currentDirection) &amp;&amp; currentCell-&gt;distance &gt; getCellDistance(currentDirection) &amp;&amp; !getIsCellExplored(currentDirection))
476		{
--&gt;477			return currentDirection;
478		}
479	
480		//if the cell to the right is open and the distance is shorter than the current distance, and hasn't been explored go there
481		if (!(currentCell-&gt;data &amp; getDirection(RIGHT)) &amp;&amp; currentCell-&gt;distance &gt; getCellDistance(getDirection(RIGHT)) &amp;&amp; !getIsCellExplored(currentDirection))
482		{
483			return getDirection(RIGHT);
484		}
485	
486		//if the cell to the left is open and the distance is shorter than the current distance, and hasn't been explored go there
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="Micromouse.ino, line 175" Id="ab022e84-b32d-4106-a218-6eb0cbaad54c" Enabled="1" Message="canMove is: {canMove}" MessageTextType="0" PreProcessedMessage="canMove is: {0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\p-sorensen\documents\github\micromouse\micromouse.ino" FileLine="175" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ab022e84-b32d-4106-a218-6eb0cbaad54c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>168		currentDirection = ISNORTH;
169		currentCell = &amp;maze[0][0];
170		currentCell-&gt;data |= ISEAST;
171		currentCell-&gt;data |= ISWEST;
172		currentCell-&gt;data |= ISSOUTH;
173		currentCell-&gt;data |= ISEXPLORED;
174		stack.push(currentCell);
--&gt;175		bool canMove = !(currentCell-&gt;data &amp; currentDirection); 
176		bool better = currentCell-&gt;distance &gt; getCellDistance(currentDirection);
177		bool isExplored = !getIsCellExplored(currentDirection);
178		
179	}
180	
181	
182	
183	void loop()
184	{
</Source>
        <MessageVariables>
          <MessageVariable Name="canMove" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="Micromouse.ino, line 176" Id="720ca735-414a-4ad0-bdea-87597568feea" Enabled="1" Message="better is {better}" MessageTextType="0" PreProcessedMessage="better is {0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\p-sorensen\documents\github\micromouse\micromouse.ino" FileLine="176" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='720ca735-414a-4ad0-bdea-87597568feea'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>169		currentCell = &amp;maze[0][0];
170		currentCell-&gt;data |= ISEAST;
171		currentCell-&gt;data |= ISWEST;
172		currentCell-&gt;data |= ISSOUTH;
173		currentCell-&gt;data |= ISEXPLORED;
174		stack.push(currentCell);
175		bool canMove = !(currentCell-&gt;data &amp; currentDirection); 
--&gt;176		bool better = currentCell-&gt;distance &gt; getCellDistance(currentDirection);
177		bool isExplored = !getIsCellExplored(currentDirection);
178		
179	}
180	
181	
182	
183	void loop()
184	{
185		while (currentCell-&gt;distance == 0);
</Source>
        <MessageVariables>
          <MessageVariable Name="better" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="9" Name="Micromouse.ino, line 177" Id="f71f9ac3-0e48-4ddd-a364-9e8755bed13b" Enabled="1" Message="isExplored is: {isExplored}" MessageTextType="0" PreProcessedMessage="isExplored is: {0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\p-sorensen\documents\github\micromouse\micromouse.ino" FileLine="177" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f71f9ac3-0e48-4ddd-a364-9e8755bed13b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>170		currentCell-&gt;data |= ISEAST;
171		currentCell-&gt;data |= ISWEST;
172		currentCell-&gt;data |= ISSOUTH;
173		currentCell-&gt;data |= ISEXPLORED;
174		stack.push(currentCell);
175		bool canMove = !(currentCell-&gt;data &amp; currentDirection); 
176		bool better = currentCell-&gt;distance &gt; getCellDistance(currentDirection);
--&gt;177		bool isExplored = !getIsCellExplored(currentDirection);
178		
179	}
180	
181	
182	
183	void loop()
184	{
185		while (currentCell-&gt;distance == 0);
186		updateWalls();
</Source>
        <MessageVariables>
          <MessageVariable Name="isExplored" Index="1" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>